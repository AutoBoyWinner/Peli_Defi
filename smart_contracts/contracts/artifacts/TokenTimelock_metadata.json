{
	"compiler": {
		"version": "0.5.5+commit.47a71e8f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": true,
				"inputs": [],
				"name": "beneficiary",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "release",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "releaseTime",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "token",
						"type": "address"
					},
					{
						"name": "beneficiary",
						"type": "address"
					},
					{
						"name": "releaseTime",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"devdoc": {
			"details": "A token holder contract that will allow a beneficiary to extract the tokens after a given release time. * Useful for simple vesting schedules like \"advisors get all of their tokens after 1 year\". * For a more complete vesting schedule, see {TokenVesting}.",
			"methods": {
				"beneficiary()": {
					"return": "the beneficiary of the tokens."
				},
				"releaseTime()": {
					"return": "the time when the tokens are released."
				},
				"token()": {
					"return": "the token being held."
				}
			}
		},
		"userdoc": {
			"methods": {
				"release()": {
					"notice": "Transfers tokens held by timelock to beneficiary."
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/TokenTimelock.sol": "TokenTimelock"
		},
		"evmVersion": "petersburg",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/math/SafeMath.sol": {
			"keccak256": "0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076",
			"urls": [
				"bzzr://292843005e754e752644f767477ec5ad7a1ffc91ddb18c38b8079c62f3993cad"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9",
			"urls": [
				"bzzr://cf2d583b8dce38d0617fdcd65f2fd9f126fe17b7f683b5a515ea9d2762d8b062"
			]
		},
		"@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
			"keccak256": "0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2",
			"urls": [
				"bzzr://d2ff5aadcb697bc27ca3b0f6c40b4998e8cf0a1bd0f761d1df6d5981777841ae"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11",
			"urls": [
				"bzzr://4e1d23731da27602b8c552e54fb9976dadf8cf46a8f90a3c8c1b85fe044618b9"
			]
		},
		"contracts/TokenTimelock.sol": {
			"keccak256": "0x4c9329df04c6d16ad1b94076d37c2d9b2a365cc98f26b23385e360ac4a5780bf",
			"urls": [
				"bzzr://1e1279957712918fad025ab9e2a07f216dddfa42ac25cb0601bb1ad9d63530ef"
			]
		}
	},
	"version": 1
}